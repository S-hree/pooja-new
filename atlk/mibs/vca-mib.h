/* Copyright (C) 2012-2016 Autotalks Ltd. */
/* File generated automatically; do not edit. */
/* Source: AUTOTALKS-VCA-MIB revision 201507160000. */
#ifndef _ATLK_MIBS_VCA_MIB_H
#define _ATLK_MIBS_VCA_MIB_H

#include <atlk/mib_service.h>
#include <atlk/mibs/tc.h>

#ifdef __cplusplus
extern "C" {
#endif

/**
   @file
   AUTOTALKS-VCA-MIB access API.

   VCA (V2X Communication Analyzer) MIB.
*/

/**
   Get vcaBsmRxEnabled value.

   Whether BSM reception is enabled.

   @param[in] service Instance of MIB service
   @param[out] value vcaBsmRxEnabled value

   @retval ::ATLK_OK if succeeded
   @return Error code if failed
*/
atlk_rc_t atlk_must_check
mib_get_vcaBsmRxEnabled(mib_service_t *service,
            int *value);

/**
   Set vcaBsmRxEnabled value.

   Whether BSM reception is enabled.

   @param[in] service Instance of MIB service
   @param[in] value vcaBsmRxEnabled value

   @retval ::ATLK_OK if succeeded
   @return Error code if failed
*/
atlk_rc_t atlk_must_check
mib_set_vcaBsmRxEnabled(mib_service_t *service,
            int value);

/** Enumeration of vcaLogMode values */
typedef enum {
  MIB_vcaLogMode_off = 0,
  MIB_vcaLogMode_ifHasNavFix = 1,
  MIB_vcaLogMode_ifHasTrueTime = 2
} mib_vcaLogMode_t;

/**
   Get vcaLogMode value.

   VCA logging modes:

   off -- No logging.
   ifHasNavFix -- Log only when navigation fix is available.
   ifHasTrueTime -- Log only when true (UTC) time is available.

   @param[in] service Instance of MIB service
   @param[out] value vcaLogMode value

   @retval ::ATLK_OK if succeeded
   @return Error code if failed
*/
atlk_rc_t atlk_must_check
mib_get_vcaLogMode(mib_service_t *service,
            mib_vcaLogMode_t *value);

/**
   Set vcaLogMode value.

   VCA logging modes:

   off -- No logging.
   ifHasNavFix -- Log only when navigation fix is available.
   ifHasTrueTime -- Log only when true (UTC) time is available.

   @param[in] service Instance of MIB service
   @param[in] value vcaLogMode value

   @retval ::ATLK_OK if succeeded
   @return Error code if failed
*/
atlk_rc_t atlk_must_check
mib_set_vcaLogMode(mib_service_t *service,
            mib_vcaLogMode_t value);

/** Minimum vcaTxPeriod value (units: milliseconds) */
#define MIB_vcaTxPeriod_MIN 10

/** Maximum vcaTxPeriod value (units: milliseconds) */
#define MIB_vcaTxPeriod_MAX 1000

/**
   Get vcaTxPeriod value (units: milliseconds).

   Time period between sequential VCA frame transmissions.

   @param[in] service Instance of MIB service
   @param[in] ifIndex ifIndex value
   @param[out] value vcaTxPeriod value (units: milliseconds)

   @retval ::ATLK_OK if succeeded
   @return Error code if failed
*/
atlk_rc_t atlk_must_check
mib_get_vcaTxPeriod(mib_service_t *service,
            int32_t ifIndex,
            uint32_t *value);

/**
   Set vcaTxPeriod value (units: milliseconds).

   Time period between sequential VCA frame transmissions.

   @param[in] service Instance of MIB service
   @param[in] ifIndex ifIndex value
   @param[in] value vcaTxPeriod value (units: milliseconds)

   @retval ::ATLK_OK if succeeded
   @return Error code if failed
*/
atlk_rc_t atlk_must_check
mib_set_vcaTxPeriod(mib_service_t *service,
            int32_t ifIndex,
            uint32_t value);

/** Minimum vcaFrameLen value (units: octets) */
#define MIB_vcaFrameLen_MIN 40

/** Maximum vcaFrameLen value (units: octets) */
#define MIB_vcaFrameLen_MAX 2304

/**
   Get vcaFrameLen value (units: octets).

   Length of IEEE 802.11 MSDU generated by VCA.

   @param[in] service Instance of MIB service
   @param[in] ifIndex ifIndex value
   @param[out] value vcaFrameLen value (units: octets)

   @retval ::ATLK_OK if succeeded
   @return Error code if failed
*/
atlk_rc_t atlk_must_check
mib_get_vcaFrameLen(mib_service_t *service,
            int32_t ifIndex,
            uint32_t *value);

/**
   Set vcaFrameLen value (units: octets).

   Length of IEEE 802.11 MSDU generated by VCA.

   @param[in] service Instance of MIB service
   @param[in] ifIndex ifIndex value
   @param[in] value vcaFrameLen value (units: octets)

   @retval ::ATLK_OK if succeeded
   @return Error code if failed
*/
atlk_rc_t atlk_must_check
mib_set_vcaFrameLen(mib_service_t *service,
            int32_t ifIndex,
            uint32_t value);

/**
   Get vcaTxEnabled value.

   Whether VCA frame transmission from this MAC interface is enabled.

   @param[in] service Instance of MIB service
   @param[in] ifIndex ifIndex value
   @param[out] value vcaTxEnabled value

   @retval ::ATLK_OK if succeeded
   @return Error code if failed
*/
atlk_rc_t atlk_must_check
mib_get_vcaTxEnabled(mib_service_t *service,
            int32_t ifIndex,
            int *value);

/**
   Set vcaTxEnabled value.

   Whether VCA frame transmission from this MAC interface is enabled.

   @param[in] service Instance of MIB service
   @param[in] ifIndex ifIndex value
   @param[in] value vcaTxEnabled value

   @retval ::ATLK_OK if succeeded
   @return Error code if failed
*/
atlk_rc_t atlk_must_check
mib_set_vcaTxEnabled(mib_service_t *service,
            int32_t ifIndex,
            int value);

/**
   Get vcaConfigSaveStatus value.

   VCA MIB configuration save status.

   @param[in] service Instance of MIB service
   @param[out] value vcaConfigSaveStatus value

   @retval ::ATLK_OK if succeeded
   @return Error code if failed
*/
atlk_rc_t atlk_must_check
mib_get_vcaConfigSaveStatus(mib_service_t *service,
            mib_ConfigSaveStatus_t *value);

/**
   Set vcaConfigSaveStatus value.

   VCA MIB configuration save status.

   @param[in] service Instance of MIB service
   @param[in] value vcaConfigSaveStatus value

   @retval ::ATLK_OK if succeeded
   @return Error code if failed
*/
atlk_rc_t atlk_must_check
mib_set_vcaConfigSaveStatus(mib_service_t *service,
            mib_ConfigSaveStatus_t value);

#ifdef __cplusplus
}
#endif

#endif /* _ATLK_MIBS_VCA_MIB_H */
